buildscript {
	ext {
		springBootVersion = '1.5.2.RELEASE'
	}
	repositories {
		mavenLocal()
		maven { url "http://maven.aliyun.com/nexus/content/groups/public/"}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		//classpath("com.moowork.gradle:gradle-node-plugin:1.1.0")
        classpath("com.github.houbie:lesscss-gradle-plugin:1.0.3-less-1.7.0")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
// apply plugin: 'com.moowork.node'
apply plugin: 'lesscss'

jar {
	baseName = 'dlut-web-app'
	version = '2.0.1-SNAPSHOT'
}
/* node {
    version = '6.9.4'
    npmVersion = '4.0.5'
    distBaseUrl = 'http://npm.taobao.org/mirrors/node'
    download = true
    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")
    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")
    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}")
} */

sourceCompatibility = 1.8
targetCompatibility = 1.8

lessc {
    sourceDir "src/main/resources/static/less"
    include "**/bootstrap.less","**/main.less"
    exclude "less/bootstrap"
    destinationDir = 'build/resources/main/static/css'

    options.compress = true
    options.minify = true
}

repositories {
    mavenLocal()
    //maven { url "http://192.168.1.250:8081/nexus/content/groups/public/" }
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/"}
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-integration')
	compile('org.springframework.boot:spring-boot-starter-mobile')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf') {
        exclude group: 'nz.net.ultraq.thymeleaf'
    }
	compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.apache.shiro:shiro-spring:1.3.2')
    compile('org.apache.shiro:shiro-ehcache:1.3.2')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.apache.poi:poi-ooxml:3.9')
    compile('net.sourceforge.javacsv:javacsv:2.0')
    //compile('com.h2database:h2')
    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('org.postgresql:postgresql')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

clean {
    delete "build"
}
/*
task cnpmInstall(type: NpmTask) {
    //args = ['install', '--save-dev', 'webpack', '--registry=http://registry.cnpmjs.org']
    args = ['install', '--save-dev', '--registry=http://registry.cnpmjs.org']
}
*/
//task webpack(type: NpmTask, dependsOn: cnpmInstall) {
//    args = ['run', 'build']
//}
//task webpack(type: NodeTask, dependsOn: cnpmInstall) {
//    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
//        script = project.file('node_modules/webpack/bin/webpack.js')
//    } else {
//        script = project.file('node_modules/.bin/webpack')
//    }
//}

// processResources.dependsOn 'webpack'

task cleanResources(type: Delete) {
    delete 'build/resources'
}

//processResources {
//    expand(project.properties)
//}

task stage(dependsOn: 'bootRepackage') {
}

compileJava.dependsOn processResources
processResources.dependsOn 'cleanResources', 'lessc'//, 'webpack'

//clean.delete << file('node_modules')
//clean.delete << file('src/main/resources/static/dist')
